import pytest

from src.widget import get_date
from src.widget import mask_account_card


@pytest.mark.parametrize(
    "data, expected",
    [
        # Корректные данные для карт
        ("Карта 1234567812345678", "Карта 1234 56** **** 5678"),  # Обычная карта
        ("Visa 8765432187654321", "Visa 8765 43** **** 4321"),  # Другая карта
        # Корректные данные для счетов
        ("Счёт 40702810912345678901", "Счёт **8901"),  # Обычный счет
        ("Счёт 00000000000000000000", "Счёт **0000"),  # Все нули
        # Некорректные форматы
        ("НеправильныйФормат123", "Некорректный формат данных!"),  # Неправильный формат строки
        ("Карта 1234", "Карта Проверьте правильность введенного номера карты!"),  # Карта слишком короткая
        ("Счёт 1234567890", "Счёт Проверьте правильность введенного номера счета!"),  # Счёт слишком короткий
        ("12345", "Некорректный формат данных!"),  # Только номер без типа
        ("", "Некорректный формат данных!"),  # Пустая строка
    ],
)
def test_mask_account_card(data, expected):
    """
    Тестирует маскирование карт и счетов, а также обработку некорректных данных.
    """
    assert mask_account_card(data) == expected


@pytest.mark.parametrize(
    "date_time, expected",
    [
        # Корректные данные, формат "YYYY-MM-DDTHH:MM:SS"
        ("2023-12-01T14:23:00", "01.12.2023"),  # Пример обычной даты
        ("1999-01-01T00:00:00", "01.01.1999"),  # Начало года
        ("2010-07-15T23:59:59", "15.07.2010"),  # Другая дата
        ("2024-02-29T12:00:00", "29.02.2024"),  # Високосный год (29 февраля)
        # Граничные случаи
        ("0000-01-01T00:00:00", "01.01.0000"),  # Минимальная дата (формально валидная)
        ("9999-12-31T23:59:59", "31.12.9999"),  # Максимальная дата (формально валидная)
        # Нестандартные данные (невалидные случаи)
        ("2023-12-01", "Дата указана неверно!"),  # Нет времени
        ("01.12.2023", "Дата указана неверно!"),  # Неправильный формат
        ("2023/12/01T14:23:00", "Дата указана неверно!"),  # Разделитель в дате неверный
        ("", "Дата указана неверно!"),  # Пустая строка
        ("NotADate", "Дата указана неверно!"),  # Полностью некорректная строка
        ("20231201T142300", "Дата указана неверно!"),  # Дата, записанная без разделителей
    ],
)
def test_get_date(date_time, expected):
    """
    Тест функции get_date для разных входных строк.
    """
    assert get_date(date_time) == expected
